finding the largest and smallest numbers in an array
Server Code
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

// Function to find the smallest and largest numbers in an array
void find_min_max(int arr[], int size, int *min, int *max) {
    // Initialize min and max with the first element of the array
    *min = arr[0];
    *max = arr[0];

    // Traverse the array to find min and max
    for (int i = 1; i < size; i++) {
        if (arr[i] < *min) {
            *min = arr[i];
        }
        if (arr[i] > *max) {
            *max = arr[i];
        }
    }
}

int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    int opt = 1;
    int arr[100]; // Assuming a maximum size for the array
    int size;

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    // Read array size from client
    valread = read(new_socket, &size, sizeof(size));

    // Read array elements from client
    valread = read(new_socket, arr, size * sizeof(int));

    // Find min and max in the array
    int min, max;
    find_min_max(arr, size, &min, &max);

    // Send min and max back to client
    send(new_socket, &min, sizeof(min), 0);
    send(new_socket, &max, sizeof(max), 0);

    printf("Min and Max numbers sent to client: %d and %d\n", min, max);

    return 0;
}


CLIEBT
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

int main(int argc, char const *argv[]) {
    int sock = 0, valread;
    struct sockaddr_in serv_addr;
    int size;
    int arr[100]; // Assuming a maximum size for the array

    // Initialize the array with some values (for demonstration)
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    printf("Enter %d integers for the array:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("Socket creation error\n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported\n");
        return -1;
    }

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed\n");
        return -1;
    }

    // Send size of array to server
    send(sock, &size, sizeof(size), 0);

    // Send array elements to server
    send(sock, arr, size * sizeof(int), 0);

    // Receive min and max numbers from server
    int min, max;
    valread = read(sock, &min, sizeof(min));
    valread = read(sock, &max, sizeof(max));

    printf("Smallest number in array: %d\n", min);
    printf("Largest number in array: %d\n", max);

    return 0;
}
