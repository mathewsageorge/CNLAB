BUBBLE SORT

Client Code (client.c)
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

int main(int argc, char const *argv[]) {
    int sock = 0, valread;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};
    char* hello = "Hello from client";
    int numbers[] = {3, 1, 4, 1, 5, 9, 2, 6, 5};  // Array of numbers to sort
    int n = sizeof(numbers) / sizeof(numbers[0]);

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("Socket creation error\n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported\n");
        return -1;
    }

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed\n");
        return -1;
    }

    send(sock, hello, strlen(hello), 0);
    printf("Hello message sent\n");

    // Send the number of elements
    send(sock, &n, sizeof(n), 0);
    // Send the array of numbers
    send(sock, numbers, sizeof(numbers), 0);

    // Read the sorted numbers from the server
    valread = read(sock, buffer, 1024);
    printf("Sorted numbers: %s\n", buffer);

    return 0;
}


Server Code (server.c)

#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

void sort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    int opt = 1;
    char* hello = "Hello from server";

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    valread = read(new_socket, buffer, 1024);
    printf("%s\n", buffer);

    // Read the number of elements
    int n;
    read(new_socket, &n, sizeof(n));
    int numbers[n];

    // Read the array of numbers
    read(new_socket, numbers, sizeof(numbers));

    // Sort the numbers
    sort(numbers, n);

    // Convert sorted numbers to a string
    char sorted_numbers[1024] = {0};
    for (int i = 0; i < n; i++) {
        char num_str[12];
        sprintf(num_str, "%d ", numbers[i]);
        strcat(sorted_numbers, num_str);
    }

    // Send the sorted numbers back to the client
    send(new_socket, sorted_numbers, strlen(sorted_numbers), 0);
    printf("Sorted numbers sent\n");

    return 0;
}
